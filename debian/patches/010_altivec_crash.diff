Index: configure
===================================================================
--- configure.orig	2007-01-09 21:25:32.000000000 +0100
+++ configure	2007-03-14 23:09:10.000000000 +0100
@@ -161,9 +170,9 @@
     ARCH="PPC"
     if [ $SYS = MACOSX ]
     then
-      CFLAGS="$CFLAGS -faltivec -fastf -mcpu=G4"
+      ALTIVECFLAGS="$ALTIVECFLAGS -faltivec -fastf -mcpu=G4"
     else
-      CFLAGS="$CFLAGS -maltivec -mabi=altivec"
+      ALTIVECFLAGS="$ALTIVECFLAGS -maltivec -mabi=altivec"
     fi
     ;;
   sparc)
@@ -385,6 +405,7 @@
 SYS=$SYS
 CC=$CC
 CFLAGS=$CFLAGS
+ALTIVECFLAGS=$ALTIVECFLAGS
 LDFLAGS=$LDFLAGS
 AS=$AS
 ASFLAGS=$ASFLAGS
Index: common/cpu.c
===================================================================
--- common/cpu.c.orig	2006-12-16 01:32:38.000000000 +0100
+++ common/cpu.c	2007-03-14 23:08:27.000000000 +0100
@@ -132,9 +132,43 @@
 }
 
 #elif defined( SYS_LINUX )
+#include <signal.h>
+#include <setjmp.h>
+static sigjmp_buf jmpbuf;
+static volatile sig_atomic_t canjump = 0;
+
+static void sigill_handler( int sig )
+{
+    if( !canjump )
+    {
+        signal( sig, SIG_DFL );
+        raise( sig );
+    }
+
+    canjump = 0;
+    siglongjmp( jmpbuf, 1 );
+}
+
 uint32_t x264_cpu_detect( void )
 {
-    /* FIXME (Linux PPC) */
+    static void (* oldsig)( int );
+
+    oldsig = signal( SIGILL, sigill_handler );
+    if( sigsetjmp( jmpbuf, 1 ) )
+    {
+        signal( SIGILL, oldsig );
+        return 0;
+    }
+
+    canjump = 1;
+    asm volatile( "mtspr 256, %0\n\t"
+                  "vand 0, 0, 0\n\t"
+                  :
+                  : "r"(-1) );
+    canjump = 0;
+
+    signal( SIGILL, oldsig );
+
     return X264_CPU_ALTIVEC;
 }
 #endif
Index: Makefile
===================================================================
--- Makefile.orig	2007-03-14 23:08:19.000000000 +0100
+++ Makefile	2007-03-14 23:09:14.000000000 +0100
@@ -43,8 +43,10 @@
 
 # AltiVec optims
 ifeq ($(ARCH),PPC)
-SRCS += common/ppc/mc.c common/ppc/pixel.c common/ppc/dct.c \
-	common/ppc/quant.c
+ALTIVECSRC += common/ppc/mc.c common/ppc/pixel.c common/ppc/dct.c \
+              common/ppc/quant.c
+SRCS += $(ALTIVECSRC)
+$(ALTIVECSRC:%.c=%.o): CFLAGS += $(ALTIVECFLAGS)
 endif
 
 # VIS optims
@@ -95,7 +94,7 @@
 .depend: config.mak
 	rm -f .depend
 # Hacky - because gcc 2.9x doesn't have -MT
-	$(foreach SRC, $(SRCS) $(SRCCLI), ( $(ECHON) "`dirname $(SRC)`/" && $(CC) $(CFLAGS) $(SRC) -MM -g0 ) 1>> .depend;)
+	$(foreach SRC, $(SRCS) $(SRCCLI), ( $(ECHON) "`dirname $(SRC)`/" && $(CC) $(CFLAGS) $(ALTIVECFLAGS) $(SRC) -MM -g0 ) 1>> .depend;)
 
 config.mak: $(wildcard .svn/entries */.svn/entries */*/.svn/entries)
 	./configure $(CONFIGURE_ARGS)
Index: common/ppc/quant.c
===================================================================
--- common/ppc/quant.c.orig	2007-03-14 23:08:43.000000000 +0100
+++ common/ppc/quant.c	2007-03-14 23:09:01.000000000 +0100
@@ -18,6 +18,20 @@
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
 *****************************************************************************/
 
+#if defined SYS_LINUX
+#include <altivec.h>
+#endif
+
+typedef union {
+  unsigned int s[4];
+  vector unsigned int v;
+} vect_int_u;
+
+typedef union {
+  unsigned short s[8];
+  vector unsigned short v;
+} vect_ushort_u;
+
 #include "common/common.h"
 #include "ppccommon.h"
 #include "quant.h"            
Index: common/ppc/quant.h
===================================================================
--- common/ppc/quant.h.orig	2007-03-14 23:08:43.000000000 +0100
+++ common/ppc/quant.h	2007-03-14 23:09:01.000000000 +0100
@@ -18,23 +18,9 @@
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
 *****************************************************************************/
 
-#ifdef SYS_LINUX
-#include <altivec.h>
-#endif
-
 #ifndef _PPC_QUANT_H
 #define _PPC_QUANT_H 1
 
-typedef union {
-  unsigned int s[4];
-  vector unsigned int v;
-} vect_int_u;
-
-typedef union {
-  unsigned short s[8];
-  vector unsigned short v;
-} vect_ushort_u;
-
 void x264_quant_4x4_altivec( int16_t dct[4][4], int quant_mf[4][4], int const i_qbits, int const f );
 void x264_quant_8x8_altivec( int16_t dct[8][8], int quant_mf[8][8], int const i_qbits, int const f );
 
